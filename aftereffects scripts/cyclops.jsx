var XMP_NAMESPACE = "http://www.weareinstrument.com/cyclops";var outputFile = null;var includeRawData = true;var includeKeyFrameData = false;var timeValueScale = 1000;var UI = {};var cyclopsData = {    "exportedProperties" : []};function saveMetaData() {    // load the XMP library as an ExtendScript ExternalObject     if (ExternalObject.AdobeXMPScript == undefined) {        ExternalObject.AdobeXMPScript = new        ExternalObject('lib:AdobeXMPScript');    }    var mdata = new XMPMeta(app.project.xmpPacket);        try {                // define new namespace        XMPMeta.registerNamespace(XMP_NAMESPACE, "cyc");                mdata.setProperty(XMP_NAMESPACE, "exportAsJson", UI["exportAsJson"].value ? 1 : 0);                if(UI["tweenName"].text != ""){            mdata.setProperty(XMP_NAMESPACE, "tweenName", UI["tweenName"].text);        }            if(outputFile){            mdata.setProperty(XMP_NAMESPACE, "outputFile", outputFile.absoluteURI);        }        var properties = getExportedPropertyList();        if(properties){            //$.writeln(JSON.stringify(properties));            mdata.setProperty(XMP_NAMESPACE, "properties", JSON.stringify(properties));        }    }    catch(e) {         alert(e);    }    app.project.xmpPacket = mdata.serialize();}function getExportedPropertyList(){    var exportList = [];    for(var i = 0; i < cyclopsData.exportedProperties.length; i++){        var p = cyclopsData.exportedProperties[i];        exportList.push({            "curveName" : p.tweenName,            "compName" : p.compName,            "layerName" : p.layerName,            "propertyGroupName" : p.propertyGroupName,            "propertyName" : p.propertyName        });    }    return exportList;}function readMetaData(){        if (ExternalObject.AdobeXMPScript == undefined) {        ExternalObject.AdobeXMPScript = new ExternalObject('lib:AdobeXMPScript');    }    if(XMPMeta.getNamespacePrefix(XMP_NAMESPACE) != "") {        var mdata = new XMPMeta(app.project.xmpPacket);                if(mdata.doesPropertyExist(XMP_NAMESPACE, "tweenName")){            UI["tweenName"].text = mdata.getProperty(XMP_NAMESPACE, "tweenName");        }                if(mdata.doesPropertyExist(XMP_NAMESPACE, "exportAsJson")){            if(mdata.getProperty(XMP_NAMESPACE, "exportAsJson") == 1){                UI["exportAsJson"].value = true;                UI["exportAsVar"].value = false;            } else {                UI["exportAsJson"].value = false;                UI["exportAsVar"].value = true;            }        }          if(mdata.doesPropertyExist(XMP_NAMESPACE, "outputFile")){             outputFile = new File(mdata.getProperty(XMP_NAMESPACE, "outputFile"));             if(outputFile){                 UI["filePath"].text = outputFile.absoluteURI;             }        }        if(mdata.doesPropertyExist(XMP_NAMESPACE, "properties")){            var properties = JSON.parse( mdata.getProperty(XMP_NAMESPACE, "properties") );                        for(var i = 0; i < properties.length; i++){                var p = properties[i];                                var prop = getProperty(p.compName, p.layerName, p.propertyGroupName, p.propertyName);                if(prop){                    addProperty(p.curveName, prop);                }            }        }    }}// Find a specific property within the current project.// Holy nested-for-loops, Batman.function getProperty(compName, layerName, groupName, propertyName) {    // loop through all the project items    for(var i = 0; i < app.project.numItems; i++){        var comp = app.project.item(i+1);                // Find a composition with the target name        if((comp instanceof CompItem) && (comp.name == compName)){                            // iterate through all layers.            for(var n = 0; n < comp.numLayers; n++){                var layer = comp.layer(n+1)                                // Find the target layer                if((layer instanceof AVLayer) && (layer.name == layerName)){                    // loop through layer property groups                    for(var g = 0; g < layer.numProperties; g++){                        var group = layer.property(g+1);                        // find the target property group                        if((group instanceof PropertyGroup) && (group.name == groupName)){                            // Loop through individual properties                            for(var p = 0; p < group.numProperties; p++){                                // find the property we're looking for                                if(group.property(p+1).name == propertyName){                                    return group.property(p+1);                                }                            }                        }                    }                }            }        }    }    // didn't find it..    return null;}// Export keyframe data to a file.function exportData() {    if(outputFile == null){        setOutputFile();    }    if((UI["exportAsJson"] == false) && (UI["tweenName"].text == "")){        alert("You must specify a name for the tween data variable");        return;    }    if(outputFile){        var data = getExportData();        if(data){            outputFile.open("w");            try{                if(UI["exportAsJson"].value){                    outputFile.write(JSON.stringify(data));                } else {                    var tweenName = UI["tweenName"].text;                    outputFile.write( "var " + tweenName + " = " + JSON.stringify(data) + ";" );                }                outputFile.close();            }catch(e){                alert("Error Saving Data:\n" + e.message);            }        }    } else {        alert("no output file");    }}// Set the output file for export (this just sets the path, the file is not written here)function setOutputFile(){    outputFile = File.saveDialog("Choose an output file");        if(outputFile){        UI["filePath"].text = outputFile.absoluteURI;    }}// Get the entire map of properties/keyframes for all exported properties.function getExportData(){    var json = {};    var dataExists = false;        for(var i = 0; i < cyclopsData.exportedProperties.length; i++){        //$.writeln("Layer: " + cyclopsData.exportedProperties[i].layerName + ":" + cyclopsData.exportedProperties[i].propertyName);        var tween = cyclopsData.exportedProperties[i].tweenName;        var data = getKeyFrameInfoForProperty(cyclopsData.exportedProperties[i].property);        if(includeRawData){            data["frameData"] = getFrameData(cyclopsData.exportedProperties[i].property);                        // Convert fractional seconds to milliseconds            for(var n = 0; n < data["frameData"].length; n++){                data["frameData"][n].t = data["frameData"][n].t * timeValueScale;            }        }            if(data["frameData"] || data["keyframes"]){            var propertyName = cyclopsData.exportedProperties[i].propertyName.toLowerCase();                        if(!json[tween]){                var comp = getContainingCompForProperty(cyclopsData.exportedProperties[i].property);                                json[tween] = data;                json[tween]["_comp_bounds"] = [comp.width, comp.height];            }            dataExists = true;        }    }    if(dataExists){        return json;    }else{        return null;    }}function getContainingCompForProperty(prop){    var parent = prop.parentProperty;    while(!((parent instanceof AVLayer) || (parent instanceof TextLayer))){        parent = parent.parentProperty;    }    return parent.containingComp;}// Get a javascript object containing the data for all the keyframes of a given propertyfunction getKeyFrameInfoForProperty(prop){        var firstKeyTime = 100000000000000; // nobody would ever make a composition this long, right?!?  Right.    var lastKeyTime = -1;    var keyData = [];        if(prop.numKeys == 0){        return null;    }       for(var i = 0; i < prop.numKeys; i++){        var keyIndex = i + 1; // in the AE API, keyframe indices start at 1, not 0                if(prop.keyTime(keyIndex) > lastKeyTime){            lastKeyTime = prop.keyTime(keyIndex);        }                if(prop.keyTime(keyIndex) < firstKeyTime){            firstKeyTime = prop.keyTime(keyIndex);        }            var key = {            "time" : prop.keyTime(keyIndex),            "value" : prop.keyValue(keyIndex),            "in" : {                "type" : getEasingType(prop.keyInInterpolationType(keyIndex)),                "speed" : prop.keyInTemporalEase(keyIndex)[0].speed,                "influence" : prop.keyInTemporalEase(keyIndex)[0].influence,            },            "out" : {                "type" : getEasingType(prop.keyOutInterpolationType(keyIndex)),                "speed" : prop.keyOutTemporalEase(keyIndex)[0].speed,                "influence" : prop.keyOutTemporalEase(keyIndex)[0].influence,            }        };        if(prop.isSpatial){            key["hasTangents"] = true;            key["in"]["type"] = "bezier";            key["in"]["tangent"] = prop.keyInSpatialTangent(keyIndex);            key["out"]["type"] = "bezier";            key["out"]["tangent"] = prop.keyOutSpatialTangent(keyIndex);        } else {            key["hasTangents"] = false;        }           keyData.push(key);    }    var bounds = getMinMax(prop);        var propertyData = {        "duration" : (lastKeyTime - firstKeyTime) * timeValueScale,        "startTime" : firstKeyTime * timeValueScale,        "min" : bounds.min,        "max" : bounds.max,        "begin" : bounds.begin,        "end" : bounds.end    }    if(includeKeyFrameData){        // convert fractional seconds to milliseconds        for(var i = 0; i < keyData.length; i++){            keyData[i].time *= timeValueScale;        }        propertyData["keys"] = keyData;    }    return propertyData;}function getMinMax(prop){        var firstKeyTime = 100000000000000; // nobody would ever make a composition this long, right?!?  Right.    var lastKeyTime = -1;    if(prop.numKeys <= 1){        return null;    }       // find the first and last keyframe times.    for(var i = 0; i < prop.numKeys; i++){        var keyIndex = i + 1; // in the AE API, keyframe indices start at 1, not 0        if(prop.keyTime(keyIndex) > lastKeyTime){            lastKeyTime = prop.keyTime(keyIndex);        }                if(prop.keyTime(keyIndex) < firstKeyTime){            firstKeyTime = prop.keyTime(keyIndex);        }    }        var min = [];    var max = [];    var beginValues = prop.keyValue(1);    var endValues = prop.keyValue(prop.numKeys);    var tmp = prop.valueAtTime(1.0, null);    if(!tmp.length){       tmp = [tmp];    }    for(var i = 0; i < tmp.length; i++){        min.push(10000000000);        max.push(-100000000000);    }    var t = firstKeyTime;        while(t < (lastKeyTime + 1.0)){        var v = prop.valueAtTime(t, null);        if(!v.length){           v = [v];        }            for(var i = 0; i < v.length; i++){            if(min[i] > v[i]){                min[i] = v[i];            }            if(max[i] < v[i]){                max[i] = v[i];            }        }                t += 0.01; // arbitrary time step..    }    return {        "min" : min,        "max" : max,        "begin" : beginValues,        "end" : endValues    };}/** Translate numeric keyframe types to a string representation*/function getEasingType(typeId){    switch(typeId){        case KeyframeInterpolationType.LINEAR:            return "linear";        break;        case KeyframeInterpolationType.BEZIER:            return "bezier";        break;        case KeyframeInterpolationType.HOLD:            return "hold";        break;        default:            return "UNKNOWN";        break;    }}// Add properties selected in the composition to the list of exported propertiesfunction addSelectedProperty() {    if(!app.project || !app.project.activeItem){        return;    }    var layers = app.project.activeItem.selectedLayers;    // at least one property must be selected.    if(layers.length == 0){        alert("no properties selected.");        return;    }    for(var i = 0; i < layers.length; i++) {        //$.writeln("Layer: " + layers[i].name + " has " + layers[i].selectedProperties.length + " selected properties");        for(var p = 0; p < layers[i].selectedProperties.length; p++){            //$.writeln("Is group: " + (layers[i].selectedProperties[p] instanceof PropertyGroup));            if( !(layers[i].selectedProperties[p] instanceof Property) ){                alert("Please select an individual property, not a group of properties.");            } else if(!isPropertyExported(layers[i].selectedProperties[p])){                 var curveName = prompt("Curve name:", layers[i].name + "-" + layers[i].selectedProperties[p].name.toLowerCase());                 if(curveName != null){                    addProperty(curveName, layers[i].selectedProperties[p]);                 } else {                     break;                 }            } else {               // alert(layers[i].selectedProperties[p].name + " is already being tracked.");            }                }    }    UI["mainWindow"].layout.resize();}function addProperty(name, prop) {        var group = prop.parentProperty;    var layer = group.parentProperty;    var comp = layer.containingComp;        var newProp = {        "tweenName" : name,        "compName" : comp.name,        "layerName" : layer.name,        "propertyGroupName" : group.name,        "propertyName" : prop.name,        "property" : prop    };    cyclopsData.exportedProperties.push(newProp);        var item = UI["exportedProperties"].add( "item", name );   // item.subItems[0].text = prop.name;    item.subItems[0].text = comp.name + " / " + layer.name + " / " + group.name + " / " + prop.name;}// Removes a property from the listbox of exported properties.function removeSelectedProperty(){    if(UI["exportedProperties"].selection != null) {        cyclopsData.exportedProperties.splice(UI["exportedProperties"].selection.index, 1);        UI["exportedProperties"].remove( UI["exportedProperties"].selection );    }}// Checks to see if a given property is present in the list.function isPropertyExported(property){    var parentGroup = property.parentProperty;        if(parentGroup.name != "Transform"){        return false;    }        var parentLayer = parentGroup.parentProperty;    var parentComp = parentLayer.containingComp;        for(var i = 0; i < cyclopsData.exportedProperties.length; i++){        var exp = cyclopsData.exportedProperties[i];        if((exp.compName == parentComp.name) && (exp.layerName == parentLayer.name) && (exp.propertyName == property.name)){            return true;        }    }    return false;}function buildUI(contextObj){    var mainWindow = null;    if(contextObj instanceof Panel) {        mainWindow = contextObj;    } else {        mainWindow = new Window("palette", "Cyclops Data Export", undefined, {resizeable:true});        mainWindow.size = [640,300];    }        UI["mainWindow"] = mainWindow;            var inputGroup = mainWindow.add("group{orientation:'column',alignment:['fill', 'fill']}");        mainWindow.addEventListener("resize", function(e){        this.layout.resize();    });    mainWindow.addEventListener("close", function(e){        app.cancelTask(taskId);        stopServer();    });        var buttonGroup = inputGroup.add("group{orientation:'row',alignment:['left','top']}");    var addPropertyButton = buttonGroup.add ("button", undefined, "Add Property");     addPropertyButton.onClick = function(e) {        addSelectedProperty();    };    var removePropertyButton = buttonGroup.add("button", undefined, "Remove Property");    removePropertyButton.onClick = function(e) {        removeSelectedProperty();    };        UI["exportedProperties"] = inputGroup.add("ListBox", undefined, "exportedProperties",  {        alignment: ['fill','fill'],        numberOfColumns: 2,         showHeaders: true,         columnTitles: ['Curve Name', 'Source']        });    UI["exportedProperties"].alignment = ["fill", "fill"];    UI["exportedProperties"].onDoubleClick = function(e){            };        var tweenNameGroup = inputGroup.add("group{orientation:'row'}");        tweenNameGroup.alignment = ["fill","bottom"];    var bottomGroup = inputGroup.add("group{orientation:'row'}");        bottomGroup.alignment = ["fill","bottom"];            var tweenNameLabel = tweenNameGroup.add("statictext", undefined, "Export as:");    var radioJson = tweenNameGroup.add("radiobutton", undefined, "JSON data");    var radioNamedVar = tweenNameGroup.add("radiobutton", undefined, "Named object");        UI["exportAsJson"] = radioJson;    UI["exportAsVar"] = radioNamedVar;    var tweenName = tweenNameGroup.add("edittext");    tweenName.alignment = ["fill", "center"];    tweenName.text = "keyframeData";    UI["tweenName"] = tweenName;            var setPathButton = bottomGroup.add("button", undefined, "Browse");    setPathButton.alignment = ["left","center"];    setPathButton.onClick = function(e) {        setOutputFile();    };        var filePath = bottomGroup.add("statictext");    filePath.alignment = ["fill","center"];    filePath.text = "Output: (not specified)";    UI["filePath"] = filePath;        var exportDataButton = bottomGroup.add("button", undefined, "Export Properties");    exportDataButton.alignment = ["right","center"];    exportDataButton.onClick = function(e) {        exportData();        saveMetaData();    };        if (mainWindow instanceof Window)    {        mainWindow.onShow = function() {            readMetaData();        }        mainWindow.show();    }    else    {        mainWindow.layout.layout(true);        readMetaData();    }}buildUI(this);function getFrameData(prop) {    var comp = getContainingCompForProperty(prop);    var frameDuration = comp.frameDuration;    //$.writeln("Getting data for prop: " + prop.name);    //$.writeln("frame duration: " + frameDuration);    var firstKeyTime = 100000000000000; // nobody would ever make a composition this long, right?!?  Right.    var lastKeyTime = -1;    var keyData = [];        if(prop.numKeys == 0){        return null;    }       for(var i = 0; i < prop.numKeys; i++){        var keyIndex = i + 1; // in the AE API, keyframe indices start at 1, not 0                if(prop.keyTime(keyIndex) > lastKeyTime){            lastKeyTime = prop.keyTime(keyIndex);        }                if(prop.keyTime(keyIndex) < firstKeyTime){            firstKeyTime = prop.keyTime(keyIndex);        }    }        var t = firstKeyTime;    var data = [];        var tmp = prop.valueAtTime(1.0, null);    if(!tmp.length){       tmp = [tmp];    }     var min = [];    var max = [];        for(var i = 0; i < tmp.length; i++){        min.push(10000000000);        max.push(-100000000000);    }        while(t < (lastKeyTime + frameDuration )){        var v = prop.valueAtTime(t, null);        if(!v.length){           v = [v];        }            for(var i = 0; i < v.length; i++){            if(min[i] > v[i]){                min[i] = v[i];            }            if(max[i] < v[i]){                max[i] = v[i];            }        }                data.push( {"t" : t, "val" : v } );        t += frameDuration;    }    return data;}///// INCLUDING json2.js ///////*    json2.js    2013-05-26    Public Domain.    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.    See http://www.JSON.org/js.html    This code should be minified before deployment.    See http://javascript.crockford.com/jsmin.html    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO    NOT CONTROL.    This file creates a global JSON object containing two methods: stringify    and parse.        JSON.stringify(value, replacer, space)            value       any JavaScript value, usually an object or array.            replacer    an optional parameter that determines how object                        values are stringified for objects. It can be a                        function or an array of strings.            space       an optional parameter that specifies the indentation                        of nested structures. If it is omitted, the text will                        be packed without extra whitespace. If it is a number,                        it will specify the number of spaces to indent at each                        level. If it is a string (such as '\t' or '&nbsp;'),                        it contains the characters used to indent at each level.            This method produces a JSON text from a JavaScript value.            When an object value is found, if the object contains a toJSON            method, its toJSON method will be called and the result will be            stringified. A toJSON method does not serialize: it returns the            value represented by the name/value pair that should be serialized,            or undefined if nothing should be serialized. The toJSON method            will be passed the key associated with the value, and this will be            bound to the value            For example, this would serialize Dates as ISO strings.                Date.prototype.toJSON = function (key) {                    function f(n) {                        // Format integers to have at least two digits.                        return n < 10 ? '0' + n : n;                    }                    return this.getUTCFullYear()   + '-' +                         f(this.getUTCMonth() + 1) + '-' +                         f(this.getUTCDate())      + 'T' +                         f(this.getUTCHours())     + ':' +                         f(this.getUTCMinutes())   + ':' +                         f(this.getUTCSeconds())   + 'Z';                };            You can provide an optional replacer method. It will be passed the            key and value of each member, with this bound to the containing            object. The value that is returned from your method will be            serialized. If your method returns undefined, then the member will            be excluded from the serialization.            If the replacer parameter is an array of strings, then it will be            used to select the members to be serialized. It filters the results            such that only members with keys listed in the replacer array are            stringified.            Values that do not have JSON representations, such as undefined or            functions, will not be serialized. Such values in objects will be            dropped; in arrays they will be replaced with null. You can use            a replacer function to replace those with JSON values.            JSON.stringify(undefined) returns undefined.            The optional space parameter produces a stringification of the            value that is filled with line breaks and indentation to make it            easier to read.            If the space parameter is a non-empty string, then that string will            be used for indentation. If the space parameter is a number, then            the indentation will be that many spaces.            Example:            text = JSON.stringify(['e', {pluribus: 'unum'}]);            // text is '["e",{"pluribus":"unum"}]'            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');            // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'            text = JSON.stringify([new Date()], function (key, value) {                return this[key] instanceof Date ?                    'Date(' + this[key] + ')' : value;            });            // text is '["Date(---current time---)"]'        JSON.parse(text, reviver)            This method parses a JSON text to produce an object or array.            It can throw a SyntaxError exception.            The optional reviver parameter is a function that can filter and            transform the results. It receives each of the keys and values,            and its return value is used instead of the original value.            If it returns what it received, then the structure is not modified.            If it returns undefined then the member is deleted.            Example:            // Parse the text. Values that look like ISO date strings will            // be converted to Date objects.            myData = JSON.parse(text, function (key, value) {                var a;                if (typeof value === 'string') {                    a =/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);                    if (a) {                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],                            +a[5], +a[6]));                    }                }                return value;            });            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {                var d;                if (typeof value === 'string' &&                        value.slice(0, 5) === 'Date(' &&                        value.slice(-1) === ')') {                    d = new Date(value.slice(5, -1));                    if (d) {                        return d;                    }                }                return value;            });    This is a reference implementation. You are free to copy, modify, or    redistribute.*//*jslint evil: true, regexp: true *//*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,    lastIndex, length, parse, prototype, push, replace, slice, stringify,    test, toJSON, toString, valueOf*/// Create a JSON object only if one does not already exist. We create the// methods in a closure to avoid creating global variables.if (typeof JSON !== 'object') {    JSON = {};}(function () {    'use strict';    function f(n) {        // Format integers to have at least two digits.        return n < 10 ? '0' + n : n;    }    if (typeof Date.prototype.toJSON !== 'function') {        Date.prototype.toJSON = function () {            return isFinite(this.valueOf())                ? this.getUTCFullYear()     + '-' +                    f(this.getUTCMonth() + 1) + '-' +                    f(this.getUTCDate())      + 'T' +                    f(this.getUTCHours())     + ':' +                    f(this.getUTCMinutes())   + ':' +                    f(this.getUTCSeconds())   + 'Z'                : null;        };        String.prototype.toJSON      =            Number.prototype.toJSON  =            Boolean.prototype.toJSON = function () {                return this.valueOf();            };    }    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,        gap,        indent,        meta = {    // table of character substitutions            '\b': '\\b',            '\t': '\\t',            '\n': '\\n',            '\f': '\\f',            '\r': '\\r',            '"' : '\\"',            '\\': '\\\\'        },        rep;    function quote(string) {// If the string contains no control characters, no quote characters, and no// backslash characters, then we can safely slap some quotes around it.// Otherwise we must also replace the offending characters with safe escape// sequences.        escapable.lastIndex = 0;        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {            var c = meta[a];            return typeof c === 'string'                ? c                : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);        }) + '"' : '"' + string + '"';    }    function str(key, holder) {// Produce a string from holder[key].        var i,          // The loop counter.            k,          // The member key.            v,          // The member value.            length,            mind = gap,            partial,            value = holder[key];// If the value has a toJSON method, call it to obtain a replacement value.        if (value && typeof value === 'object' &&                typeof value.toJSON === 'function') {            value = value.toJSON(key);        }// If we were called with a replacer function, then call the replacer to// obtain a replacement value.        if (typeof rep === 'function') {            value = rep.call(holder, key, value);        }// What happens next depends on the value's type.        switch (typeof value) {        case 'string':            return quote(value);        case 'number':// JSON numbers must be finite. Encode non-finite numbers as null.            return isFinite(value) ? String(value) : 'null';        case 'boolean':        case 'null':// If the value is a boolean or null, convert it to a string. Note:// typeof null does not produce 'null'. The case is included here in// the remote chance that this gets fixed someday.            return String(value);// If the type is 'object', we might be dealing with an object or an array or// null.        case 'object':// Due to a specification blunder in ECMAScript, typeof null is 'object',// so watch out for that case.            if (!value) {                return 'null';            }// Make an array to hold the partial results of stringifying this object value.            gap += indent;            partial = [];// Is the value an array?            if (Object.prototype.toString.apply(value) === '[object Array]') {// The value is an array. Stringify every element. Use null as a placeholder// for non-JSON values.                length = value.length;                for (i = 0; i < length; i += 1) {                    partial[i] = str(i, value) || 'null';                }// Join all of the elements together, separated with commas, and wrap them in// brackets.                v = partial.length === 0                    ? '[]'                    : gap                    ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'                    : '[' + partial.join(',') + ']';                gap = mind;                return v;            }// If the replacer is an array, use it to select the members to be stringified.            if (rep && typeof rep === 'object') {                length = rep.length;                for (i = 0; i < length; i += 1) {                    if (typeof rep[i] === 'string') {                        k = rep[i];                        v = str(k, value);                        if (v) {                            partial.push(quote(k) + (gap ? ': ' : ':') + v);                        }                    }                }            } else {// Otherwise, iterate through all of the keys in the object.                for (k in value) {                    if (Object.prototype.hasOwnProperty.call(value, k)) {                        v = str(k, value);                        if (v) {                            partial.push(quote(k) + (gap ? ': ' : ':') + v);                        }                    }                }            }// Join all of the member texts together, separated with commas,// and wrap them in braces.            v = partial.length === 0                ? '{}'                : gap                ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'                : '{' + partial.join(',') + '}';            gap = mind;            return v;        }    }// If the JSON object does not yet have a stringify method, give it one.    if (typeof JSON.stringify !== 'function') {        JSON.stringify = function (value, replacer, space) {// The stringify method takes a value and an optional replacer, and an optional// space parameter, and returns a JSON text. The replacer can be a function// that can replace values, or an array of strings that will select the keys.// A default replacer method can be provided. Use of the space parameter can// produce text that is more easily readable.            var i;            gap = '';            indent = '';// If the space parameter is a number, make an indent string containing that// many spaces.            if (typeof space === 'number') {                for (i = 0; i < space; i += 1) {                    indent += ' ';                }// If the space parameter is a string, it will be used as the indent string.            } else if (typeof space === 'string') {                indent = space;            }// If there is a replacer, it must be a function or an array.// Otherwise, throw an error.            rep = replacer;            if (replacer && typeof replacer !== 'function' &&                    (typeof replacer !== 'object' ||                    typeof replacer.length !== 'number')) {                throw new Error('JSON.stringify');            }// Make a fake root object containing our value under the key of ''.// Return the result of stringifying the value.            return str('', {'': value});        };    }// If the JSON object does not yet have a parse method, give it one.    if (typeof JSON.parse !== 'function') {        JSON.parse = function (text, reviver) {// The parse method takes a text and an optional reviver function, and returns// a JavaScript value if the text is a valid JSON text.            var j;            function walk(holder, key) {// The walk method is used to recursively walk the resulting structure so// that modifications can be made.                var k, v, value = holder[key];                if (value && typeof value === 'object') {                    for (k in value) {                        if (Object.prototype.hasOwnProperty.call(value, k)) {                            v = walk(value, k);                            if (v !== undefined) {                                value[k] = v;                            } else {                                delete value[k];                            }                        }                    }                }                return reviver.call(holder, key, value);            }// Parsing happens in four stages. In the first stage, we replace certain// Unicode characters with escape sequences. JavaScript handles many characters// incorrectly, either silently deleting them, or treating them as line endings.            text = String(text);            cx.lastIndex = 0;            if (cx.test(text)) {                text = text.replace(cx, function (a) {                    return '\\u' +                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);                });            }// In the second stage, we run the text against regular expressions that look// for non-JSON patterns. We are especially concerned with '()' and 'new'// because they can cause invocation, and '=' because it can cause mutation.// But just to be safe, we want to reject all unexpected forms.// We split the second stage into 4 regexp operations in order to work around// crippling inefficiencies in IE's and Safari's regexp engines. First we// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we// replace all simple value tokens with ']' characters. Third, we delete all// open brackets that follow a colon or comma or that begin the text. Finally,// we look to see that the remaining characters are only whitespace or ']' or// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.            if (/^[\],:{}\s]*$/                    .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')                        .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')                        .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {// In the third stage we use the eval function to compile the text into a// JavaScript structure. The '{' operator is subject to a syntactic ambiguity// in JavaScript: it can begin a block or an object literal. We wrap the text// in parens to eliminate the ambiguity.                j = eval('(' + text + ')');// In the optional fourth stage, we recursively walk the new structure, passing// each name/value pair to a reviver function for possible transformation.                return typeof reviver === 'function'                    ? walk({'': j}, '')                    : j;            }// If the text is not JSON parseable, then a SyntaxError is thrown.            throw new SyntaxError('JSON.parse');        };    }}());